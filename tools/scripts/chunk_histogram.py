#!/usr/bin/env python

"""
Parses a corpus chunk stats CSV generated by the BitFunnel corpus utils, and
buckets documents it finds into histograms.
"""

from __future__ import with_statement

from collections import defaultdict
import itertools, math, sys


def make_hist(lines, pwr_10_to_round_down_to):
    """
    [string] -> int -> [(int, [string])]
    Parses lines from our stats CSV file (NOT including the header) and outputs a histogram.
    """

    resolution = 10**pwr_10_to_round_down_to
    hist = defaultdict(lambda: [])
    for line in lines:
        # TODO: This is not real CSV parsing. It's fine for now but we should
        # fix it before it causes us trouble.
        [docId, totalStreamLength] = line.strip().split(',')

        # TODO: WARNING! This does not gracefully handle the case that the
        # first column is not an integral type.
        bucket = int(math.floor(int(totalStreamLength) / resolution))
        hist[bucket*resolution] += [docId]

    return hist


def hist_as_sorted_list(hist):
    return sorted(
        [(totalStreamLength, docIds) for totalStreamLength,docIds in hist.iteritems()],
        key=lambda (totalStreamLength, docIds): totalStreamLength)


def print_hist(hist, n = 0):
    sorted_hist = hist_as_sorted_list(hist)

    if n < 0:
        n = len(sorted_hist)

    print "Doc length, #of docs at that length"
    for (totalStreamLength, docIds) in sorted_hist[:n]:
        print "{0},{1}".format(totalStreamLength, len(docIds))


def print_ids_of_small_docs(lines)
    """
    Creates a histogram of documents, bucketed by tens, and then prints all IDs
    in buckets [50, 60, 70, 80, 90].
    """

    # TODO: This is not real CSV parsing. It's fine for now but we should fix
    # it before it causes us trouble.
    header = lines[0].split(',')
    hist = make_hist(lines[1:], 1)
    # print_hist(hist, 50)

    # Print only the IDs we care about.
    buckets = [50, 60, 70, 80, 90]
    flatten = itertools.chain.from_iterable
    ids = flatten(map(lambda bucket: hist[bucket], buckets))
    for id in ids:
        print id


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print "Usage: histogram [filename]"
        sys.exit(1)

    filename = sys.argv[1]
    with open(filename, 'r') as f:
        lines = f.readlines()

    if len(lines) == 0:
        print "File " + filename + " is empty"

    print_ids_of_small_docs(lines)
